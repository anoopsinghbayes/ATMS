{"version":3,"sources":["../src/mtgql.js"],"names":["randomName","len","text","possible","i","charAt","Math","floor","random","length","mapToObject","mainObj","prop","instance","type","MTGQL","args","schema","paths","GQLS","name","description","fields","id","title","duration","watched","tmpArgsObj","newSchemaObject","noChildSchema","key","hasOwnProperty","Object","keys","forEach","k","path","split","last","pop","reduce","r","a","subArgs","class","exclude","typeElement","props","SyntaxError"],"mappings":"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","file":"mtgql.js","sourcesContent":["import {\n    GraphQLObjectType,\n    GraphQLInputObjectType,\n    GraphQLUnionType,\n    GraphQLInterfaceType,\n    GraphQLEnumType,\n    GraphQLString,\n    GraphQLBoolean,\n    GraphQLList,\n    GraphQLInt,\n    GraphQLFloat,\n    GraphQLID\n} from 'graphql';\n\nlet randomName = (len) => {\n    let text = '',\n        possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < len; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n};\n\nlet mapToObject = (mainObj, prop, instance) => {\n    switch (instance) {\n    case 'ObjectID':\n        mainObj[prop] = {type: GraphQLString};\n        break;\n    case 'String':\n        mainObj[prop] = {type: GraphQLString};\n        break;\n    case 'Date':\n        mainObj[prop] = {type: GraphQLString};\n        break;\n    case 'Mixed':\n        mainObj[prop] = {type: GraphQLString};\n        break;\n    case 'Boolean':\n        mainObj[prop] = {type: GraphQLBoolean};\n        break;\n    case 'Buffer':\n        mainObj[prop] = {type: GraphQLBoolean};\n        break;\n    case 'Number':\n        mainObj[prop] = {type: GraphQLInt};\n        break;\n    case 'Array':\n        mainObj[prop] = {type: new GraphQLList(GraphQLString)};\n        break;\n    }\n    return mainObj;\n};\n\nlet MTGQL = (args) => {\n    if (args.schema && args.schema.paths) {\n        let GQLS = {\n                name: args.name,\n                description: args.description,\n                fields: {},\n             args:{\n        \n                        id: {\n                        type: GraphQLID,\n                        description: 'The id of the video.'\n                        },  \n                        title: {\n                        type: GraphQLString,\n                        description: 'The title of the video.',\n                        },\n                        duration: {\n                        type: GraphQLInt,\n                        description: 'The duration of the video (in seconds).',\n                        },\n                        watched: {\n                        type: GraphQLBoolean,\n                        description: 'Whether or not the viewer has watched the video.'\n                        },\n                    \n                }\n            },\n            tmpArgsObj = {...args.schema.paths},\n            newSchemaObject = {},\n            noChildSchema = {};\n\n        for (let key in tmpArgsObj) {\n            if (tmpArgsObj[key].hasOwnProperty('schema')) {\n                newSchemaObject[key] = tmpArgsObj[key];\n                tmpArgsObj[key] = {};\n            }\n        }\n        for (let key in tmpArgsObj) {\n            if (tmpArgsObj.hasOwnProperty(key) && !tmpArgsObj[key].schema) {\n                noChildSchema[key] = tmpArgsObj[key];\n            }\n        }\n        Object.keys(noChildSchema).forEach(function (k) {\n            if (!noChildSchema[k].hasOwnProperty('schema')) {\n                var path = k.split('.'),\n                    last = path.pop();\n\n                if (path.length) {\n                    path.reduce((r, a) => r[a] = r[a] || {}, noChildSchema)[last] = noChildSchema[k];\n                    path.reduce((r, a) => r[a] = r[a] || {}, noChildSchema)[last].path = last;\n                    delete noChildSchema[k];\n                }\n            }\n        });\n        for (let key in noChildSchema) {\n            if (noChildSchema.hasOwnProperty(key) && !newSchemaObject.hasOwnProperty(key)) {\n                newSchemaObject[key] = noChildSchema[key];\n            }\n        }\n\n        for (let key in newSchemaObject) {\n            if (newSchemaObject.hasOwnProperty(key)) {\n                if (!newSchemaObject[key].hasOwnProperty('instance')) {\n                    let subArgs = {\n                        name: `${key}SubType_${randomName(10)}`,\n                        description: `sub-object type for ${key}`,\n                        class: 'GraphQLObjectType',\n                        schema: {paths: newSchemaObject[key]},\n                        exclude: args.exclude\n                    };\n                    GQLS.fields[key] = {type: MTGQL(subArgs)};\n                } else if (newSchemaObject[key].schema) {\n                    let subArgs = {\n                            name: `${newSchemaObject[key].path}SubType_${randomName(10)}`,\n                            description: `sub-object type for ${args.name}`,\n                            class: 'GraphQLObjectType',\n                            schema: newSchemaObject[key].schema,\n                            exclude: args.exclude\n                        },\n                        typeElement = MTGQL(subArgs);\n                    GQLS.fields[key] = {type: new GraphQLList(typeElement)};\n                } else if (\n                    newSchemaObject[key] &&\n                    newSchemaObject[key].path &&\n                    newSchemaObject[key].instance &&\n                    newSchemaObject[key].path !== '__v' && !newSchemaObject[key].schema\n                ) {\n                    GQLS.fields = mapToObject(GQLS.fields,\n                        newSchemaObject[key].path,\n                        newSchemaObject[key].instance,\n                        newSchemaObject,\n                        args.exclude);\n                        \n                }\n            }\n        }\n\n        if (args.exclude) {\n            args.exclude.forEach(prop => {\n                if (GQLS.fields[prop]) {\n                    delete GQLS.fields[prop];\n                }\n            });\n        }\n\n        if (args.props) {\n            Object.keys(args.props).forEach((prop) => {\n                GQLS.fields[prop] = args.props[prop];\n            });\n        }\n\n        if (args.class === 'GraphQLObjectType') {\n            return new GraphQLObjectType(GQLS);\n        } else if (args.class === 'GraphQLInputObjectType') {\n            return new GraphQLInputObjectType(GQLS);\n        } else if (args.class === 'GraphQLInterfaceType') {\n            return new GraphQLInterfaceType(GQLS);\n        } else if (args.class === 'GraphQLUnionType') {\n            return new GraphQLUnionType(GQLS);\n        } else if (args.class === 'GraphQLEnumType') {\n            return new GraphQLEnumType(GQLS);\n        } else {\n            return new SyntaxError('Enter correct graphQL class name.');\n        }\n    }\n};\n\nexport default MTGQL;"]}