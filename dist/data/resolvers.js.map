{"version":3,"sources":["../../src/data/resolvers.js"],"names":["authors","id","firstName","lastName","posts","authorId","title","votes","resolveFunctions","Query","author","_","Mutation","upvotePost","postId","post","Error","publish","Subscription","postUpvoted","Author","Post"],"mappings":"2EAAA;AACA;;AAEA,IAAMA,UAAU;AACd,EAAEC,IAAI,CAAN,EAASC,WAAW,KAApB,EAA2BC,UAAU,SAArC,EADc;AAEd,EAAEF,IAAI,CAAN,EAASC,WAAW,QAApB,EAA8BC,UAAU,UAAxC,EAFc,CAAhB;;;AAKA,IAAMC,SAAQ;AACZ,EAAEH,IAAI,CAAN,EAASI,UAAU,CAAnB,EAAsBC,OAAO,yBAA7B,EAAwDC,OAAO,CAA/D,EADY;AAEZ,EAAEN,IAAI,CAAN,EAASI,UAAU,CAAnB,EAAsBC,OAAO,eAA7B,EAA8CC,OAAO,CAArD,EAFY;AAGZ,EAAEN,IAAI,CAAN,EAASI,UAAU,CAAnB,EAAsBC,OAAO,kBAA7B,EAAiDC,OAAO,CAAxD,EAHY,CAAd;;;AAMA,IAAMC,mBAAmB;AACvBC,SAAO;AACLL,SADK,mBACG;AACN,aAAOA,MAAP;AACD,KAHI;AAILM,UAJK,kBAIEC,CAJF,QAIa,KAANV,EAAM,QAANA,EAAM;AAChB,aAAO,kBAAKD,OAAL,EAAc,EAAEC,IAAIA,EAAN,EAAd,CAAP;AACD,KANI,EADgB;;AASvBW,YAAU;AACRC,cADQ,sBACGF,CADH,SACkB,KAAVG,MAAU,SAAVA,MAAU;AACxB,UAAMC,OAAO,kBAAKX,MAAL,EAAY,EAAEH,IAAIa,MAAN,EAAZ,CAAb;AACA,UAAI,CAACC,IAAL,EAAW;AACT,cAAM,IAAIC,KAAJ,kCAAwCF,MAAxC,CAAN;AACD;AACDC,WAAKR,KAAL,IAAc,CAAd;AACA,4BAAOU,OAAP,CAAe,aAAf,EAA8BF,IAA9B;AACA,aAAOA,IAAP;AACD,KATO,EATa;;AAoBvBG,gBAAc;AACZC,eADY,uBACAJ,IADA,EACM;AAChB,aAAOA,IAAP;AACD,KAHW,EApBS;;AAyBvBK,UAAQ;AACNhB,SADM,iBACAM,MADA,EACQ;AACZ,aAAO,oBAAON,MAAP,EAAc,EAAEC,UAAUK,OAAOT,EAAnB,EAAd,CAAP;AACD,KAHK,EAzBe;;AA8BvBoB,QAAM;AACJX,UADI,kBACGK,IADH,EACS;AACX,aAAO,kBAAKf,OAAL,EAAc,EAAEC,IAAIc,KAAKV,QAAX,EAAd,CAAP;AACD,KAHG,EA9BiB,EAAzB,C;;;;AAqCeG,gB","file":"resolvers.js","sourcesContent":["import { find, filter } from 'lodash';\nimport { pubsub } from './subscriptions';\n\nconst authors = [\n  { id: 1, firstName: 'Tom', lastName: 'Coleman' },\n  { id: 2, firstName: 'Sashko', lastName: 'Stubailo' },\n];\n\nconst posts = [\n  { id: 1, authorId: 1, title: 'Introduction to GraphQL', votes: 2 },\n  { id: 2, authorId: 2, title: 'GraphQL Rocks', votes: 3 },\n  { id: 3, authorId: 2, title: 'Advanced GraphQL', votes: 1 },\n];\n\nconst resolveFunctions = {\n  Query: {\n    posts() {\n      return posts;\n    },\n    author(_, { id }) {\n      return find(authors, { id: id });\n    },\n  },\n  Mutation: {\n    upvotePost(_, { postId }) {\n      const post = find(posts, { id: postId });\n      if (!post) {\n        throw new Error(`Couldn't find post with id ${postId}`);\n      }\n      post.votes += 1;\n      pubsub.publish('postUpvoted', post);\n      return post;\n    },\n  },\n  Subscription: {\n    postUpvoted(post) {\n      return post;\n    },\n  },\n  Author: {\n    posts(author) {\n      return filter(posts, { authorId: author.id });\n    },\n  },\n  Post: {\n    author(post) {\n      return find(authors, { id: post.authorId });\n    },\n  },\n};\n\nexport default resolveFunctions;\n"]}