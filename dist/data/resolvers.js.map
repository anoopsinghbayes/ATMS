{"version":3,"sources":["../../src/data/resolvers.js"],"names":["authors","id","firstName","lastName","posts","authorId","title","votes","resolveFunctions","Query","_","args","find","author","Author","_id","name","lazyPopulate","Post","post"],"mappings":"2EAAA;AACA;;AAEA,IAAMA,UAAU;AACd,EAAEC,IAAI,CAAN,EAASC,WAAW,KAApB,EAA2BC,UAAU,SAArC,EADc;AAEd,EAAEF,IAAI,CAAN,EAASC,WAAW,QAApB,EAA8BC,UAAU,UAAxC,EAFc,CAAhB;;;AAKA,IAAMC,QAAQ;AACZ,EAAEH,IAAI,CAAN,EAASI,UAAU,CAAnB,EAAsBC,OAAO,yBAA7B,EAAwDC,OAAO,CAA/D,EADY;AAEZ,EAAEN,IAAI,CAAN,EAASI,UAAU,CAAnB,EAAsBC,OAAO,eAA7B,EAA8CC,OAAO,CAArD,EAFY;AAGZ,EAAEN,IAAI,CAAN,EAASI,UAAU,CAAnB,EAAsBC,OAAO,kBAA7B,EAAiDC,OAAO,CAAxD,EAHY,CAAd;;;AAMA,IAAMC,mBAAmB;AACvBC,SAAO;AACLL,SADK,iBACCM,CADD,EACGC,IADH,EACS;AACZ,aAAO,uBAAKC,IAAL,EAAP;AACD,KAHI;AAILC,UAJK,kBAIEH,CAJF,EAIKC,IAJL,EAIW;AACd,aAAO,yBAAOC,IAAP,EAAP;AACA;AACD,KAPI,EADgB;;AAUvBE,UAAQ;AACNC,OADM,eACFF,MADE,EACK;AACT,aAAOA,OAAOE,GAAd;AACD,KAHK;AAINC,QAJM,gBAIDH,MAJC,EAIM;AACV,aAAOA,OAAOG,IAAd;AACD,KANK;AAONZ,SAPM,iBAOAS,MAPA,EAOQ;AACb,aAAOA,OAAOI,YAAP,CAAoB,MAApB,CAAP;AACA,KATK,EAVe;;AAqBvBC,QAAM;AACJL,UADI,kBACGM,IADH,EACS;AACb,aAAOA,KAAKF,YAAL,CAAkB,QAAlB,CAAP;AACC;AACA,KAJG,EArBiB,EAAzB,C;;;;AA6BeT,gB","file":"resolvers.js","sourcesContent":["import { find, filter } from 'lodash';\nimport {Post,Author} from '../data/mongoose-test-data';\n\nconst authors = [\n  { id: 1, firstName: 'Tom', lastName: 'Coleman' },\n  { id: 2, firstName: 'Sashko', lastName: 'Stubailo' },\n];\n\nconst posts = [\n  { id: 1, authorId: 1, title: 'Introduction to GraphQL', votes: 2 },\n  { id: 2, authorId: 2, title: 'GraphQL Rocks', votes: 3 },\n  { id: 3, authorId: 2, title: 'Advanced GraphQL', votes: 1 },\n];\n\nconst resolveFunctions = {\n  Query: {\n    posts(_,args) {\n      return Post.find();\n    },\n    author(_, args) {\n      return Author.find()\n      //post.populate('author').exec();\n    },\n  },\n  Author: {\n    _id(author){\n      return author._id;\n    },\n    name(author){\n      return author.name;\n    },\n    posts(author) {\n     return author.lazyPopulate('post');\n    },\n  },\n  Post: {\n    author(post) {\n    return post.lazyPopulate('author');\n     // return find(authors, { id: post.authorId });\n    },\n  },\n};\n\nexport default resolveFunctions;\n"]}