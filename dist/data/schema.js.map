{"version":3,"sources":["../../src/data/schema.js"],"names":["videoFields","id","type","description","title","duration","watched","videoType","name","fields","queryType","video","args","resolve","Promise","console","log","S","query","options","mutation","allowMongoIDMutation","schema"],"mappings":"kUAAA;AACA;AACA;AACA;AACA;;;;;;;;AAQA,wC;;AAEA;AACA,IAAMA,cAAY;;AAEdC,MAAI;AACFC,4BADE;AAEFC,iBAAa,sBAFX,EAFU;;AAMdC,SAAO;AACLF,gCADK;AAELC,iBAAa,yBAFR,EANO;;AAUdE,YAAU;AACRH,6BADQ;AAERC,iBAAa,yCAFL,EAVI;;AAcdG,WAAS;AACPJ,iCADO;AAEPC,iBAAa,kDAFN,EAdK,EAAlB;;;;AAoBA,IAAMI,YAAY,+BAAsB;AACtCC,QAAM,OADgC;AAEtCL,eAAa,uBAFyB;AAGtCM,uBAAYT,WAAZ,CAHsC,EAAtB,CAAlB;;AAKA,IAAMU,YAAY,+BAAsB;AACtCF,QAAM,WADgC;AAEtCL,eAAa,sBAFyB;AAGtCM,UAAQ;;;AAGNE,WAAO;AACLT,YAAMK,SADD;AAELK,yBAASZ,WAAT,CAFK;;AAILa,eAAS,2BAAM,IAAIC,OAAJ,CAAY,UAACD,OAAD,EAAa;AACtCA,kBAAQ;AACNZ,gBAAI,GADE;AAENG,mBAAO,SAFD;AAGNC,sBAAU,GAHJ;AAINC,qBAAS,KAJH,EAAR;;AAMD,SAPc,CAAN,EAJJ,EAHD,EAH8B,EAAtB,CAAlB;;;;AAqBAS,QAAQC,GAAR;AACA,IAAMC,IAAE,2BAAkB;AACxBC,SAAMX,SADkB,EAAlB,CAAR;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAMY,UAAU;AACdC,YAAU,IADI,EACE;AAChBC,wBAAsB,KAFR,CAEc;AAFd,CAAhB;;AAKA,IAAMC,SAAS,iCAAU,YAAV,EAAkBH,OAAlB,CAAf,C;AACeG,M;;AAEfP,QAAQC,GAAR,CAAYC,CAAZ;AACA;AACA;AACA","file":"schema.js","sourcesContent":["import { makeExecutableSchema,buildSchema } from 'graphql-tools';\nimport { addressType } from './graphqlType';\nimport {getSchema} from '@risingstack/graffiti-mongoose';\nimport {User} from '../models/user'\nimport {  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString ,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLObject\n} from 'graphql' \nimport resolvers from './resolvers';\n\n// Construct a schema, using GraphQL schema language\nconst videoFields={\n  \n    id: {\n      type: GraphQLID,\n      description: 'The id of the video.'\n    },  \n    title: {\n      type: GraphQLString,\n      description: 'The title of the video.',\n    },\n    duration: {\n      type: GraphQLInt,\n      description: 'The duration of the video (in seconds).',\n    },\n    watched: {\n      type: GraphQLBoolean,\n      description: 'Whether or not the viewer has watched the video.'\n    },\n  \n};\nconst videoType = new GraphQLObjectType({\n  name: 'Video',\n  description: 'A video on Egghead.io',\n  fields: {...videoFields},\n});\nconst queryType = new GraphQLObjectType({\n  name: 'QueryType',\n  description: 'The root query type.',\n  fields: {\n\n  \n    video: {\n      type: videoType,\n      args:{...videoFields},\n\n      resolve: () => new Promise((resolve) => {\n        resolve({\n          id: 'a',\n          title: 'GraphQL',\n          duration: 180,\n          watched: false\n        });\n      }),\n    },\n  },\n});\nconsole.log(addressType);\nconst S=new GraphQLSchema({\n  query:videoType\n})\n// const schema = `\n// type Author {\n//   id: Int! # the ! means that every author object _must_ have an id\n//   firstName: String\n//   lastName: String\n//   posts: [Post] # the list of Posts by this author\n// }\n\n// type Post {\n//   id: Int!\n//   title: String\n//   author: Author\n//   votes: Int\n// }\n\n// # the schema allows the following query:\n// type Query {\n//   author(firstName:String,lastName:String):[Author]\n// }\n\n// # this schema allows the following mutation:\n// type Mutation {\n//   upvotePost (\n//     postId: Int!\n//   ): Post\n// }\n\n// type Subscription {\n//   postUpvoted: Post\n// }\n\n// `;\nconst options = {\n  mutation: true, // mutation fields can be disabled\n  allowMongoIDMutation: false // mutation of mongo _id can be enabled\n};\n\nconst schema = getSchema([User], options);\nexport default schema;\n\nconsole.log(S);\n// makeExecutableSchema({\n//   typeDefs: S\n// });\n"]}