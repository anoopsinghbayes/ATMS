{"version":3,"sources":["../../src/data/schema.js"],"names":["schemaDef","typeDefs","resolvers"],"mappings":"2EAAA;AACA;AACA;AACA;;;;;;;;AAQA,wC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,8fAAN,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6Be,wCAAqB;AAClCC,YAAUD,SADwB;AAElCE,gCAFkC,EAArB,C","file":"schema.js","sourcesContent":["import { makeExecutableSchema,buildSchema } from 'graphql-tools';\nimport { addressType } from './graphqlType';\nimport {User} from '../models/user'\nimport {  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString ,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLObject\n} from 'graphql' \nimport resolvers from './resolvers';\n\n// Construct a schema, using GraphQL schema language\n// const videoFields={\n  \n//     id: {\n//       type: GraphQLID,\n//       description: 'The id of the video.'\n//     },  \n//     title: {\n//       type: GraphQLString,\n//       description: 'The title of the video.',\n//     },\n//     duration: {\n//       type: GraphQLInt,\n//       description: 'The duration of the video (in seconds).',\n//     },\n//     watched: {\n//       type: GraphQLBoolean,\n//       description: 'Whether or not the viewer has watched the video.'\n//     },\n  \n// };\n// const videoType = new GraphQLObjectType({\n//   name: 'Video',\n//   description: 'A video on Egghead.io',\n//   fields: {...videoFields},\n// });\n// const queryType = new GraphQLObjectType({\n//   name: 'QueryType',\n//   description: 'The root query type.',\n//   fields: {\n\n  \n//     video: {\n//       type: videoType,\n//       args:{...videoFields},\n\n//       resolve: () => new Promise((resolve) => {\n//         resolve({\n//           id: 'a',\n//           title: 'GraphQL',\n//           duration: 180,\n//           watched: false\n//         });\n//       }),\n//     },\n//   },\n// });\n// const S=new GraphQLSchema({\n//   query:videoType\n// })\nconst schemaDef = `\ntype Author {\n  _id: String! # the ! means that every author object _must_ have an id\n  name: String\n  posts: [Post] # the list of Posts by this author\n}\n\ntype Post {\n  _id: String!\n  title: String\n  author: Author\n  votes: Int\n}\n\n# the schema allows the following query:\ntype Query {\n  author(name:String):[Author]\n  posts(_id:String,title:String):[Post]\n}\n\n# this schema allows the following mutation:\ntype Mutation {\n  upvotePost (\n    postId: String!\n  ): Post\n}\n\n`;\n\nexport default makeExecutableSchema({\n  typeDefs: schemaDef,\n  resolvers:resolvers\n});\n"]}