{"version":3,"sources":["../../src/models/order.js"],"names":["Schema","util","require","orderStatusEnum","cargoUnitEnum","paymentStatusEnum","locationTypeEnum","AbstractOrdersSchema","apply","arguments","add","created","type","Date","default","now","orderStatus","String","enum","productId","ref","$tenant","bpId","bpAddress","ObjectId","StartDate","trim","EndDate","inherits","OrderSchema","TripSchema","locationType","address","challanNo","date","reporting","loadingUnloading","odometer","Number","distance","calculated","actual","cargoWeight","tyreWeight","netWeight","grossWeight","shortage","cargoUnit","TripOrderFinance","itemCategory","itemTitle","itemId","description","unit","totalUnit","costPerUnit","actualCost","salesCost","invoice","sales","Boolean","cost","OrdersSchema","TripOrderSchema","vehicleNo","doNo","isSubContracted","subcontractorId","tripDetails","finance","driver","quantity","costSummary","rateUnit","rate","taxPercentage","taxAmount","Amount","RentalOrderSchema","EMISchema","paymentStatus","amount","chequeNo","bankName","payeeName","chequeDate","emiDueDate","LoanSchema","customerName","agreementNo","assetCost","amountFinanced","downPayment","tenureInMonths","totalInstallments","loanType","agreementDate","repayFrequency","residualValue","agreementMode","advanceEMI","emiDetails","PurchaseOrderFinance","chargeable","PurchaseOrderSchema","billNo","billDate","loanDetails","SalesOrderFinance","SalesOrderSchema","ServiceOrderFinance","perDayCharge","totalDays","ServiceOrderSchema","Order","mtModel","plugin","TripOrder","discriminator","SalesOrder","ServiceOrder","RentalOrder","PurchaseOrder"],"mappings":"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","file":"order.js","sourcesContent":["import {mongoose} from 'mongoose';\nimport { autoIncrement } from 'mongoose-auto-increment';\n\n\nconst Schema = mongoose.Schema;\n\n\nvar util = require('util');\nvar orderStatusEnum=[\"open\",\"confirmed\",\"closed\",\"cancelled\"];\nvar cargoUnitEnum=[\"l\",\"kl\",\"t\"];\nvar paymentStatusEnum=[\"pending\",\"confirmed\",\"cancelled\"];\n/*\nlocation types\n Ultimate Pickup  UP\n \"Ultimate Drop-off\" UD\n Intermediate Pickup IP\n Intermediate Drop-off ID\n Dead Weight DW\n*/\n\nvar locationTypeEnum =[\"UP\",\"UD\",\"IP\",\"ID\",\"DW\"];\n\nfunction AbstractOrdersSchema() {\n    Schema.apply(this, arguments);\n    this.add({\n        created: {\n            type: Date,\n            default: Date.now\n        },\n        orderStatus:{\n            type:String,\n            enum:orderStatusEnum\n        },\n        productId:{\n            type:String,\n            ref:'Item',\n            $tenant:true\n        },\n        bpId:{\n            type:String,\n            ref:'BusinessPartner',\n            $tenant:true\n        },\n        bpAddress:{\n            type:Schema.ObjectId,\n            ref:'Address',\n            $tenant:true\n        },\n        StartDate: {\n            type:Date,\n            trim:true\n        },\n        EndDate: {\n            type:Date,\n            trim:true\n        }\n    })\n};\n\n\nutil.inherits(AbstractOrdersSchema, Schema);\n\nvar OrderSchema = new AbstractOrdersSchema({});\n\n\n\n/*\n\nTrip will have validations like\nminimum and maximum one Utlimate Pickup and Ultimate Dropoff .\n\n locationType will be Enum  -->\n  1.Utlimate Pickup 2.Intermediate Pickup 3.Intermediate Dropoff 4.Ultimate Dropoff 5. Dead Weight\n cargoUnit will be Enum  -->\n kl,l,kg,t\n distance   == distance from last pickup or dropoff location\n date == Date on which cargo is loaded or unloaded\n */\n\n\nvar TripSchema = new Schema({\n\n        locationType:{\n            type:String,\n            enum:locationTypeEnum\n        },\n        address:{\n         type:String\n        },\n        challanNo:{\n            type:String\n        },\n        date:{\n            reporting: {\n                type: Date\n            },\n            loadingUnloading:{\n                type: Date\n            }\n        },\n        odometer:{\n            type:Number\n        },\n        distance:{\n            calculated: {\n                type: Number\n            },\n            actual:{\n                type: Number\n            }\n\n        },\n        cargoWeight :{\n            tyreWeight:{\n                type:Number\n            },\n            netWeight:{\n                type:Number\n\n            },\n            grossWeight:{\n                type:Number\n\n            },\n            shortage:{\n              type:Number\n            },\n\n            cargoUnit:{\n                type:String,\n                enum:cargoUnitEnum\n\n\n            }\n        }\n\n    }\n);\n\nvar TripOrderFinance=new Schema({\n\n    itemCategory:{\n        type:String             // will come from Item master\n    },\n    itemTitle:{\n        type:String                //will come from Item master\n    },\n    itemId:{\n        type:Schema.ObjectId,       //Item which is added from item master based on itemCategory and item title\n        ref:'Item',\n        $tenant:true\n    },\n    description:{\n        type:String             //description will be same attribute of item master\n    },\n    unit:{\n      type:String               //e.g. per day/per month/per hour/per litre for diesel etc\n    },\n    totalUnit:{\n      type:Number\n    },\n    costPerUnit:{\n        type:Number\n    },\n    actualCost:{\n        type:Number\n    },\n    salesCost:{\n        type:String\n    },\n    invoice:{\n        sales:{\n            type:Boolean   //replaced with chargeable so that it would be more specific where should this line be shown\n        },\n        cost:{\n            type:Boolean   //i.e in sales invoice ,in cost invoice or both\n        }\n    }\n\n});\n\nutil.inherits(AbstractOrdersSchema, Schema);\nvar OrdersSchema = new AbstractOrdersSchema({});\n\n/*\n\n orderType will be Boolean -->\n Subcontracted =true For trip subcontracted to other transporter.\n By Default It will be set to false in UI\n\n SubcontractorId will be mandatory if isSubcontracted is true\n\n doNo == Delivery Order Number of client\n\n */\n\nvar TripOrderSchema = new AbstractOrdersSchema({\n\n    vehicleNo:{\n        type:Schema.ObjectId,\n        ref:'Item',\n        $tenant:true\n    },\n    doNo:{\n      type:String\n    },\n    isSubContracted:{\n      type:Boolean\n    },\n    subcontractorId:{\n        type:Schema.ObjectId,\n        ref:'BusinessPartner',\n        $tenant:true\n    },\n    tripDetails: {\n        type: [TripSchema]\n    },\n    finance:{\n        type:[TripOrderFinance]\n    },\n    driver:{\n        type:String,\n        ref:'BusinessPartner',\n        $tenant:true\n    },\n    quantity:{\n        type:Number\n    },\n    costSummary:{\n        rateUnit:{\n            type:String\n\n        },\n        rate:{\n            type:Number\n        },\n        taxPercentage:{\n            type:Number\n        },\n        taxAmount:{\n            type:Number\n        },\n        Amount:{\n            type:Number\n        }\n\n    }\n\n});\n\n\n\n/*\n\n\n  */\n\n\n\nvar RentalOrderSchema = new AbstractOrdersSchema({\n\n    vehicleNo:{\n        type:Schema.ObjectId,\n        ref:'Item',\n        $tenant:true\n    },\n    finance:{\n        type:[TripOrderFinance]\n    }\n});\n\n\n\n/*\nIn purchase order\n Chargeable =true by default and need not to show in UI because all lines will be chargeable\n */\n\n\nvar EMISchema=new Schema({\n\n    paymentStatus:{\n        type:String,\n        enum:paymentStatusEnum\n    },\n    amount:{\n        type:Number\n    },\n    chequeNo:{\n        type:Number\n    },\n    bankName:{\n        type:String\n    },\n    payeeName:{\n        type:String\n    },\n    chequeDate:{\n        type:Date\n    },\n    emiDueDate:{\n        type:Date\n    }\n});\n\n\n\nvar LoanSchema=new Schema({\n\n    customerName:{\n        type:String\n    },\n    agreementNo:{\n        type:String\n    },\n    assetCost:{\n        type:Number\n    },\n    amountFinanced:{\n        type:Number\n    },\n    downPayment:{\n        type:Number\n    },\n    tenureInMonths:{\n        type:Number\n    },\n    totalInstallments:{\n        type:Number\n    },\n    bankName:{\n        type:String\n    },\n    loanType:{\n\n        type:String,\n        default:\"Hire Purchase\"\n    },\n    agreementDate:{\n        type:Date\n    },\n    repayFrequency:{                    //Loan Re Payment frequency in Months\n        type:Number\n    },\n    residualValue:{\n        type:Number\n    },\n    agreementMode:{\n        type:String,\n        default:\"Arrier\"\n    },\n    advanceEMI:{\n        type:Number\n    },\n    vehicleNo:{\n        type:String\n    },\n    emiDetails:{\n        type:[EMISchema]\n    }\n\n});\n\n\n\n\nvar PurchaseOrderFinance=new Schema({\n\n    itemCategory:{\n        type:String             // will come from Item master\n    },\n    itemTitle:{\n        type:String                //will come from Item master\n    },\n    itemId:{\n        type:Schema.ObjectId,       //Item which is added from item master based on itemCategory and item title\n        ref:'Item',\n        $tenant:true\n    },\n    description:{\n        type:String             //description will be same attribute of item master\n    },\n    actualCost:{\n        type:Number\n    },\n    salesCost:{\n        type:String\n    },\n    chargeable:{\n        type:Boolean,\n        default:true\n    }\n\n});\n\n\n/*\n        billNo: Bill Reference number is Invoice/Bill number of item purchased\n        billDate: Date of Bill\n        loanDetails: Loan details is applicable in case of vehicle purchase\n */\n\nvar PurchaseOrderSchema = new AbstractOrdersSchema({\n\n    billNo:{\n        type:String\n    },\n    billDate:{\n        type:Date\n    },\n    finance:{\n        type:[PurchaseOrderFinance]\n    },\n    loanDetails:{\n\n        type:[LoanSchema]\n    }\n\n});\n\n/*\nIn sales order actual cost will be equal to sales cost in most senarios\nIn sales order Chargeable=true in all cases .\n\n */\n\n\n\nvar SalesOrderFinance=new Schema({\n\n    itemCategory:{\n        type:String             // will come from Item master\n    },\n    itemTitle:{\n        type:String                //will come from Item master\n    },\n    itemId:{\n        type:Schema.ObjectId,       //Item which is added from item master based on itemCategory and item title\n        ref:'Item',\n        $tenant:true\n    },\n    description:{\n        type:String             //description will be same attribute of item master\n    },\n    actualCost:{\n        type:Number\n    },\n    salesCost:{\n        type:String\n    },\n    chargeable:{\n        type:Boolean,\n        default:true\n    }\n\n});\n\nvar SalesOrderSchema = new AbstractOrdersSchema({\n\n    finance:{\n    type:[SalesOrderFinance]\n}\n});\n\n\n\nvar ServiceOrderFinance=new Schema({\n\n    itemCategory:{\n        type:String             // will come from Item master\n    },\n    itemTitle:{\n        type:String                //will come from Item master\n    },\n    itemId:{\n        type:Schema.ObjectId,       //Item which is added from item master based on itemCategory and item title\n        ref:'Item',\n        $tenant:true\n    },\n    description:{\n        type:String             //description will be same attribute of item master\n    },\n    perDayCharge:{\n        type:Number               //e.g. per day charge of employee for salary calculation\n    },\n    totalDays:{\n        type:Number\n    },\n    actualCost:{\n        type:Number\n    },\n    salesCost:{\n        type:String\n    },\n    chargeable:{\n        type:Boolean                   //Chargeable =true if add to customer invoice else keep it as internal expense\n    }\n\n});\n\n\n\n\n\nvar ServiceOrderSchema = new AbstractOrdersSchema({\n\n    billNo:{\n        type:String                 //Bill No in Case of electricity or telephone bill\n    },\n    billDate:{\n        type:Date\n    },\n\n    finance:{\n        type:[ServiceOrderFinance]\n    }\n});\n\n\n\n\n\nvar Order = mongoose.mtModel('Order', AbstractOrdersSchema); // our base model\n\n\nTripOrderSchema.plugin(autoIncrement.plugin, 'Trip');\nvar TripOrder = Order.discriminator('OTRP', TripOrderSchema);\n\n\nSalesOrderSchema.plugin(autoIncrement.plugin, 'Sales');\nvar SalesOrder = Order.discriminator('OSLS', SalesOrderSchema);\n\nServiceOrderSchema.plugin(autoIncrement.plugin, 'Service');\nvar ServiceOrder = Order.discriminator('OSER', ServiceOrderSchema);\n\nRentalOrderSchema.plugin(autoIncrement.plugin, 'Rental');\nvar RentalOrder = Order.discriminator('OREN', RentalOrderSchema);\n\nPurchaseOrderSchema.plugin(autoIncrement.plugin, 'Purchase');\nvar PurchaseOrder = Order.discriminator('OPUR', PurchaseOrderSchema);\n\n"]}