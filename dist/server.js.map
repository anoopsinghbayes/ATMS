{"version":3,"sources":["../src/server.js"],"names":["mongoose","require","console","log","GRAPHQL_PORT","WS_PORT","graphQLServer","use","db","connect","json","schema","context","endpointURL","req","res","set","send","listen","websocketServer","request","response","writeHead","end","subscriptionManager"],"mappings":"aAAA,kC;AACA;AACA;AACA,yC;AACA,4B;AACA;AACA;AACA;;;AAGA;AACA,uC;;AAEA,iD,6FALA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AAMAC,QAAQC,GAAR,CAAY,IAAZ;AACA,IAAMC,eAAe,IAArB;AACA,IAAMC,UAAU,IAAhB;AACA,IAAMC,gBAAgB,yBAAUC,GAAV,CAAc,GAAd,EAAmB,qBAAnB,CAAtB;AACA,IAAIC,KAAKR,SAASS,OAAT,CAAiB,gCAAjB,CAAT;AACAH,cAAcC,GAAd,CAAkB,UAAlB,EAA8B,qBAAWG,IAAX,EAA9B,EAAiD,0CAAe;AAC9DC,0BAD8D;AAE9DC,WAAS,EAFqD,EAAf,CAAjD;;AAIAN,cAAcC,GAAd,CAAkB,WAAlB,EAA+B,2CAAgB;AAC7CM,eAAa,UADgC,EAAhB,CAA/B;;AAGAP,cAAcC,GAAd,CAAkB,SAAlB,EAA6B,UAACO,GAAD,EAAMC,GAAN,EAAc;AACzCA,MAAIC,GAAJ,CAAQ,cAAR,EAAwB,YAAxB;AACAD,MAAIE,IAAJ,CAAS,iDAAT;AACD,CAHD;;AAKAX,cAAcY,MAAd,CAAqBd,YAArB,EAAmC,oBAAMF,QAAQC,GAAR;AACcC,cADd,cAAN,EAAnC;;;AAIA;AACA,IAAMe,kBAAkB,wBAAa,UAACC,OAAD,EAAUC,QAAV,EAAuB;AAC1DA,WAASC,SAAT,CAAmB,GAAnB;AACAD,WAASE,GAAT;AACD,CAHuB,CAAxB;;;AAMAJ,gBAAgBD,MAAhB,CAAuBb,OAAvB,EAAgC,oBAAMH,QAAQC,GAAR,EAAa;AAAb,2DACmBE,OADnB,CAAN,EAAhC;;;AAIA;AACA;AACE,EAAEmB,uDAAF,EADF;AAEEL,eAFF","file":"server.js","sourcesContent":["import express from 'express';\nimport { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport {GraphQLSchema} from 'graphql'\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport { createServer } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { printSchema } from 'graphql/utilities/schemaPrinter';\nvar mongoose = require('mongoose');\n\nimport { subscriptionManager } from './data/subscriptions';\nimport schema from './data/schema';\n\nimport { addressType } from './data/graphqlType';\nconsole.log('hi');\nconst GRAPHQL_PORT = 8080;\nconst WS_PORT = 8090;\nconst graphQLServer = express().use('*', cors());\nvar db = mongoose.connect(\"mongodb://localhost:27017/test\");\ngraphQLServer.use('/graphql', bodyParser.json(), graphqlExpress({\n  schema,\n  context: {},\n}));\ngraphQLServer.use('/graphiql', graphiqlExpress({\n  endpointURL: '/graphql',\n}));\ngraphQLServer.use('/schema', (req, res) => {\n  res.set('Content-Type', 'text/plain');\n  res.send(printSchema(schema));\n});\n\ngraphQLServer.listen(GRAPHQL_PORT, () => console.log(\n  `GraphQL Server is now running on http://localhost:${GRAPHQL_PORT}/graphql`\n));\n\n// WebSocket server for subscriptions\nconst websocketServer = createServer((request, response) => {\n  response.writeHead(404);\n  response.end();\n});\n\n\nwebsocketServer.listen(WS_PORT, () => console.log( // eslint-disable-line no-console\n  `Websocket Server is now running on http://localhost:${WS_PORT}`\n));\n\n// eslint-disable-next-line\nnew SubscriptionServer(\n  { subscriptionManager },\n  websocketServer\n);\n"]}